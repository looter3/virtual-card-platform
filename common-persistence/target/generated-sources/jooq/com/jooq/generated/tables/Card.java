/*
 * This file is generated by jOOQ.
 */
package com.jooq.generated.tables;


import com.jooq.generated.CardSystem;
import com.jooq.generated.Keys;
import com.jooq.generated.enums.CardStatus;
import com.jooq.generated.tables.Transaction.TransactionPath;
import com.jooq.generated.tables.records.CardRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Card extends TableImpl<CardRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>card_system.Card</code>
     */
    public static final Card CARD = new Card();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardRecord> getRecordType() {
        return CardRecord.class;
    }

    /**
     * The column <code>card_system.Card.id</code>.
     */
    public final TableField<CardRecord, String> ID = createField(DSL.name("id"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>card_system.Card.cardholderName</code>.
     */
    public final TableField<CardRecord, String> CARDHOLDERNAME = createField(DSL.name("cardholderName"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>card_system.Card.balance</code>.
     */
    public final TableField<CardRecord, BigDecimal> BALANCE = createField(DSL.name("balance"), SQLDataType.DECIMAL(15, 2).nullable(false), this, "");

    /**
     * The column <code>card_system.Card.createdAt</code>.
     */
    public final TableField<CardRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>card_system.Card.status</code>.
     */
    public final TableField<CardRecord, CardStatus> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(7).nullable(false).defaultValue(DSL.inline("ACTIVE", SQLDataType.VARCHAR)).asEnumDataType(CardStatus.class), this, "");

    /**
     * The column <code>card_system.Card.version</code>.
     */
    public final TableField<CardRecord, Integer> VERSION = createField(DSL.name("version"), SQLDataType.INTEGER.nullable(false).defaultValue(DSL.inline("0", SQLDataType.INTEGER)), this, "");

    private Card(Name alias, Table<CardRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Card(Name alias, Table<CardRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>card_system.Card</code> table reference
     */
    public Card(String alias) {
        this(DSL.name(alias), CARD);
    }

    /**
     * Create an aliased <code>card_system.Card</code> table reference
     */
    public Card(Name alias) {
        this(alias, CARD);
    }

    /**
     * Create a <code>card_system.Card</code> table reference
     */
    public Card() {
        this(DSL.name("Card"), null);
    }

    public <O extends Record> Card(Table<O> path, ForeignKey<O, CardRecord> childPath, InverseForeignKey<O, CardRecord> parentPath) {
        super(path, childPath, parentPath, CARD);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class CardPath extends Card implements Path<CardRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> CardPath(Table<O> path, ForeignKey<O, CardRecord> childPath, InverseForeignKey<O, CardRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private CardPath(Name alias, Table<CardRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public CardPath as(String alias) {
            return new CardPath(DSL.name(alias), this);
        }

        @Override
        public CardPath as(Name alias) {
            return new CardPath(alias, this);
        }

        @Override
        public CardPath as(Table<?> alias) {
            return new CardPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : CardSystem.CARD_SYSTEM;
    }

    @Override
    public UniqueKey<CardRecord> getPrimaryKey() {
        return Keys.KEY_CARD_PRIMARY;
    }

    private transient TransactionPath _transaction;

    /**
     * Get the implicit to-many join path to the
     * <code>card_system.Transaction</code> table
     */
    public TransactionPath transaction() {
        if (_transaction == null)
            _transaction = new TransactionPath(this, null, Keys.TRANSACTION_IBFK_1.getInverseKey());

        return _transaction;
    }

    @Override
    public TableField<CardRecord, Integer> getRecordVersion() {
        return VERSION;
    }

    @Override
    public Card as(String alias) {
        return new Card(DSL.name(alias), this);
    }

    @Override
    public Card as(Name alias) {
        return new Card(alias, this);
    }

    @Override
    public Card as(Table<?> alias) {
        return new Card(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Card rename(String name) {
        return new Card(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Card rename(Name name) {
        return new Card(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Card rename(Table<?> name) {
        return new Card(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Card where(Condition condition) {
        return new Card(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Card where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Card where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Card where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Card where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Card where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Card where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Card where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Card whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Card whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
