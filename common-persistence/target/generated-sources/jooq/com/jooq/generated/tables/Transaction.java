/*
 * This file is generated by jOOQ.
 */
package com.jooq.generated.tables;


import com.jooq.generated.CardSystem;
import com.jooq.generated.Indexes;
import com.jooq.generated.Keys;
import com.jooq.generated.enums.TransactionType;
import com.jooq.generated.tables.Card.CardPath;
import com.jooq.generated.tables.records.TransactionRecord;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Transaction extends TableImpl<TransactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>card_system.Transaction</code>
     */
    public static final Transaction TRANSACTION = new Transaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionRecord> getRecordType() {
        return TransactionRecord.class;
    }

    /**
     * The column <code>card_system.Transaction.id</code>.
     */
    public final TableField<TransactionRecord, String> ID = createField(DSL.name("id"), SQLDataType.CHAR(36).nullable(false), this, "");

    /**
     * The column <code>card_system.Transaction.cardId</code>.
     */
    public final TableField<TransactionRecord, String> CARDID = createField(DSL.name("cardId"), SQLDataType.CHAR(36), this, "");

    /**
     * The column <code>card_system.Transaction.type</code>.
     */
    public final TableField<TransactionRecord, TransactionType> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(5).nullable(false).asEnumDataType(TransactionType.class), this, "");

    /**
     * The column <code>card_system.Transaction.amount</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.DECIMAL(15, 2).nullable(false), this, "");

    /**
     * The column <code>card_system.Transaction.createdAt</code>.
     */
    public final TableField<TransactionRecord, LocalDateTime> CREATEDAT = createField(DSL.name("createdAt"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field(DSL.raw("CURRENT_TIMESTAMP"), SQLDataType.LOCALDATETIME)), this, "");

    private Transaction(Name alias, Table<TransactionRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Transaction(Name alias, Table<TransactionRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>card_system.Transaction</code> table reference
     */
    public Transaction(String alias) {
        this(DSL.name(alias), TRANSACTION);
    }

    /**
     * Create an aliased <code>card_system.Transaction</code> table reference
     */
    public Transaction(Name alias) {
        this(alias, TRANSACTION);
    }

    /**
     * Create a <code>card_system.Transaction</code> table reference
     */
    public Transaction() {
        this(DSL.name("Transaction"), null);
    }

    public <O extends Record> Transaction(Table<O> path, ForeignKey<O, TransactionRecord> childPath, InverseForeignKey<O, TransactionRecord> parentPath) {
        super(path, childPath, parentPath, TRANSACTION);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TransactionPath extends Transaction implements Path<TransactionRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TransactionPath(Table<O> path, ForeignKey<O, TransactionRecord> childPath, InverseForeignKey<O, TransactionRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TransactionPath(Name alias, Table<TransactionRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TransactionPath as(String alias) {
            return new TransactionPath(DSL.name(alias), this);
        }

        @Override
        public TransactionPath as(Name alias) {
            return new TransactionPath(alias, this);
        }

        @Override
        public TransactionPath as(Table<?> alias) {
            return new TransactionPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : CardSystem.CARD_SYSTEM;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.TRANSACTION_CARDID);
    }

    @Override
    public UniqueKey<TransactionRecord> getPrimaryKey() {
        return Keys.KEY_TRANSACTION_PRIMARY;
    }

    @Override
    public List<ForeignKey<TransactionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.TRANSACTION_IBFK_1);
    }

    private transient CardPath _card;

    /**
     * Get the implicit join path to the <code>card_system.Card</code> table.
     */
    public CardPath card() {
        if (_card == null)
            _card = new CardPath(this, Keys.TRANSACTION_IBFK_1, null);

        return _card;
    }

    @Override
    public Transaction as(String alias) {
        return new Transaction(DSL.name(alias), this);
    }

    @Override
    public Transaction as(Name alias) {
        return new Transaction(alias, this);
    }

    @Override
    public Transaction as(Table<?> alias) {
        return new Transaction(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(String name) {
        return new Transaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(Name name) {
        return new Transaction(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(Table<?> name) {
        return new Transaction(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction where(Condition condition) {
        return new Transaction(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transaction where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transaction where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transaction where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Transaction where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Transaction whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
